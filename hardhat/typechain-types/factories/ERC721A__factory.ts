/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ERC721A, ERC721AInterface } from "../ERC721A";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ApprovalCallerNotOwnerNorApproved",
    type: "error",
  },
  {
    inputs: [],
    name: "ApprovalQueryForNonexistentToken",
    type: "error",
  },
  {
    inputs: [],
    name: "ApprovalToCurrentOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "ApproveToCaller",
    type: "error",
  },
  {
    inputs: [],
    name: "BalanceQueryForZeroAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "OwnerIndexOutOfBounds",
    type: "error",
  },
  {
    inputs: [],
    name: "OwnerQueryForNonexistentToken",
    type: "error",
  },
  {
    inputs: [],
    name: "TokenIndexOutOfBounds",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferCallerNotOwnerNorApproved",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferFromIncorrectOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferToNonERC721ReceiverImplementer",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferToZeroAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "URIQueryForNonexistentToken",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "tokenByIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "tokenOfOwnerByIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620014da380380620014da8339810160408190526200003491620001db565b81516200004990600190602085019062000068565b5080516200005f90600290602084019062000068565b50505062000282565b828054620000769062000245565b90600052602060002090601f0160209004810192826200009a5760008555620000e5565b82601f10620000b557805160ff1916838001178555620000e5565b82800160010185558215620000e5579182015b82811115620000e5578251825591602001919060010190620000c8565b50620000f3929150620000f7565b5090565b5b80821115620000f35760008155600101620000f8565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200013657600080fd5b81516001600160401b03808211156200015357620001536200010e565b604051601f8301601f19908116603f011681019082821181831017156200017e576200017e6200010e565b816040528381526020925086838588010111156200019b57600080fd5b600091505b83821015620001bf5785820183015181830184015290820190620001a0565b83821115620001d15760008385830101525b9695505050505050565b60008060408385031215620001ef57600080fd5b82516001600160401b03808211156200020757600080fd5b620002158683870162000124565b935060208501519150808211156200022c57600080fd5b506200023b8582860162000124565b9150509250929050565b600181811c908216806200025a57607f821691505b602082108114156200027c57634e487b7160e01b600052602260045260246000fd5b50919050565b61124880620002926000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80634f6ccce711610097578063a22cb46511610066578063a22cb4651461022c578063b88d4fde1461023f578063c87b56dd14610252578063e985e9c51461026557600080fd5b80634f6ccce7146101eb5780636352211e146101fe57806370a082311461021157806395d89b411461022457600080fd5b806318160ddd116100d357806318160ddd1461018257806323b872dd146101b25780632f745c59146101c557806342842e0e146101d857600080fd5b806301ffc9a71461010557806306fdde031461012d578063081812fc14610142578063095ea7b31461016d575b600080fd5b610118610113366004610dfb565b6102a1565b60405190151581526020015b60405180910390f35b61013561030e565b6040516101249190610e70565b610155610150366004610e83565b6103a0565b6040516001600160a01b039091168152602001610124565b61018061017b366004610eb8565b6103e4565b005b6101a46000546001600160801b03600160801b82048116918116919091031690565b604051908152602001610124565b6101806101c0366004610ee2565b610472565b6101a46101d3366004610eb8565b61047d565b6101806101e6366004610ee2565b61057a565b6101a46101f9366004610e83565b610595565b61015561020c366004610e83565b610640565b6101a461021f366004610f1e565b610652565b6101356106a1565b61018061023a366004610f39565b6106b0565b61018061024d366004610f8b565b610746565b610135610260366004610e83565b610780565b610118610273366004611067565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b60006001600160e01b031982166380ac58cd60e01b14806102d257506001600160e01b03198216635b5e139f60e01b145b806102ed57506001600160e01b0319821663780e9d6360e01b145b8061030857506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606001805461031d9061109a565b80601f01602080910402602001604051908101604052809291908181526020018280546103499061109a565b80156103965780601f1061036b57610100808354040283529160200191610396565b820191906000526020600020905b81548152906001019060200180831161037957829003601f168201915b5050505050905090565b60006103ab82610812565b6103c8576040516333d1c03960e21b815260040160405180910390fd5b506000908152600560205260409020546001600160a01b031690565b60006103ef82610640565b9050806001600160a01b0316836001600160a01b031614156104245760405163250fdee360e21b815260040160405180910390fd5b336001600160a01b0382161480159061044457506104428133610273565b155b15610462576040516367d9dca160e11b815260040160405180910390fd5b61046d838383610846565b505050565b61046d8383836108a2565b600061048883610652565b82106104a7576040516306ed618760e11b815260040160405180910390fd5b600080546001600160801b03169080805b8381101561057457600081815260036020908152604091829020825160608101845290546001600160a01b0381168252600160a01b810467ffffffffffffffff1692820192909252600160e01b90910460ff161580159282019290925290610520575061056c565b80516001600160a01b03161561053557805192505b876001600160a01b0316836001600160a01b0316141561056a57868414156105635750935061030892505050565b6001909301925b505b6001016104b8565b50600080fd5b61046d83838360405180602001604052806000815250610746565b600080546001600160801b031681805b8281101561062657600081815260036020908152604091829020825160608101845290546001600160a01b0381168252600160a01b810467ffffffffffffffff1692820192909252600160e01b90910460ff1615159181018290529061061d57858314156106165750949350505050565b6001909201915b506001016105a5565b506040516329c8c00760e21b815260040160405180910390fd5b600061064b82610ac0565b5192915050565b60006001600160a01b03821661067b576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b031660009081526004602052604090205467ffffffffffffffff1690565b60606002805461031d9061109a565b6001600160a01b0382163314156106da5760405163b06307db60e01b815260040160405180910390fd5b3360008181526006602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6107518484846108a2565b61075d84848484610be4565b61077a576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b606061078b82610812565b6107a857604051630a14c4b560e41b815260040160405180910390fd5b60006107bf60408051602081019091526000815290565b90508051600014156107e0576040518060200160405280600081525061080b565b806107ea84610ce4565b6040516020016107fb9291906110d5565b6040516020818303038152906040525b9392505050565b600080546001600160801b031682108015610308575050600090815260036020526040902054600160e01b900460ff161590565b60008281526005602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60006108ad82610ac0565b80519091506000906001600160a01b0316336001600160a01b031614806108db575081516108db9033610273565b806108f65750336108eb846103a0565b6001600160a01b0316145b90508061091657604051632ce44b5f60e11b815260040160405180910390fd5b846001600160a01b031682600001516001600160a01b03161461094b5760405162a1148160e81b815260040160405180910390fd5b6001600160a01b03841661097257604051633a954ecd60e21b815260040160405180910390fd5b6109826000848460000151610846565b6001600160a01b038581166000908152600460209081526040808320805467ffffffffffffffff1980821667ffffffffffffffff92831660001901831617909255898616808652838620805493841693831660019081018416949094179055898652600390945282852080546001600160e01b031916909417600160a01b429092169190910217909255908601808352912054909116610a77576000546001600160801b0316811015610a77578251600082815260036020908152604090912080549186015167ffffffffffffffff16600160a01b026001600160e01b03199092166001600160a01b03909316929092171790555b5082846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050505050565b60408051606081018252600080825260208201819052918101829052905482906001600160801b0316811015610bcb57600081815260036020908152604091829020825160608101845290546001600160a01b0381168252600160a01b810467ffffffffffffffff1692820192909252600160e01b90910460ff16151591810182905290610bc95780516001600160a01b031615610b5f579392505050565b5060001901600081815260036020908152604091829020825160608101845290546001600160a01b038116808352600160a01b820467ffffffffffffffff1693830193909352600160e01b900460ff1615159281019290925215610bc4579392505050565b610b5f565b505b604051636f96cda160e11b815260040160405180910390fd5b60006001600160a01b0384163b15610cd857604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290610c28903390899088908890600401611104565b6020604051808303816000875af1925050508015610c63575060408051601f3d908101601f19168201909252610c6091810190611141565b60015b610cbe573d808015610c91576040519150601f19603f3d011682016040523d82523d6000602084013e610c96565b606091505b508051610cb6576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610cdc565b5060015b949350505050565b606081610d085750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610d325780610d1c81611174565b9150610d2b9050600a836111a5565b9150610d0c565b60008167ffffffffffffffff811115610d4d57610d4d610f75565b6040519080825280601f01601f191660200182016040528015610d77576020820181803683370190505b5090505b8415610cdc57610d8c6001836111b9565b9150610d99600a866111d0565b610da49060306111e4565b60f81b818381518110610db957610db96111fc565b60200101906001600160f81b031916908160001a905350610ddb600a866111a5565b9450610d7b565b6001600160e01b031981168114610df857600080fd5b50565b600060208284031215610e0d57600080fd5b813561080b81610de2565b60005b83811015610e33578181015183820152602001610e1b565b8381111561077a5750506000910152565b60008151808452610e5c816020860160208601610e18565b601f01601f19169290920160200192915050565b60208152600061080b6020830184610e44565b600060208284031215610e9557600080fd5b5035919050565b80356001600160a01b0381168114610eb357600080fd5b919050565b60008060408385031215610ecb57600080fd5b610ed483610e9c565b946020939093013593505050565b600080600060608486031215610ef757600080fd5b610f0084610e9c565b9250610f0e60208501610e9c565b9150604084013590509250925092565b600060208284031215610f3057600080fd5b61080b82610e9c565b60008060408385031215610f4c57600080fd5b610f5583610e9c565b915060208301358015158114610f6a57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215610fa157600080fd5b610faa85610e9c565b9350610fb860208601610e9c565b925060408501359150606085013567ffffffffffffffff80821115610fdc57600080fd5b818701915087601f830112610ff057600080fd5b81358181111561100257611002610f75565b604051601f8201601f19908116603f0116810190838211818310171561102a5761102a610f75565b816040528281528a602084870101111561104357600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561107a57600080fd5b61108383610e9c565b915061109160208401610e9c565b90509250929050565b600181811c908216806110ae57607f821691505b602082108114156110cf57634e487b7160e01b600052602260045260246000fd5b50919050565b600083516110e7818460208801610e18565b8351908301906110fb818360208801610e18565b01949350505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061113790830184610e44565b9695505050505050565b60006020828403121561115357600080fd5b815161080b81610de2565b634e487b7160e01b600052601160045260246000fd5b60006000198214156111885761118861115e565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826111b4576111b461118f565b500490565b6000828210156111cb576111cb61115e565b500390565b6000826111df576111df61118f565b500690565b600082198211156111f7576111f761115e565b500190565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220a30e5ca99ee0f59483902d4701706b7a09469814ac5b7788782bad1711aebba564736f6c634300080c0033";

type ERC721AConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC721AConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC721A__factory extends ContractFactory {
  constructor(...args: ERC721AConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ERC721A";
  }

  deploy(
    name_: string,
    symbol_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC721A> {
    return super.deploy(name_, symbol_, overrides || {}) as Promise<ERC721A>;
  }
  getDeployTransaction(
    name_: string,
    symbol_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(name_, symbol_, overrides || {});
  }
  attach(address: string): ERC721A {
    return super.attach(address) as ERC721A;
  }
  connect(signer: Signer): ERC721A__factory {
    return super.connect(signer) as ERC721A__factory;
  }
  static readonly contractName: "ERC721A";
  public readonly contractName: "ERC721A";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC721AInterface {
    return new utils.Interface(_abi) as ERC721AInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC721A {
    return new Contract(address, _abi, signerOrProvider) as ERC721A;
  }
}
