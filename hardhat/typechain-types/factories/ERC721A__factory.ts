/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ERC721A, ERC721AInterface } from "../ERC721A";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "tokenByIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "tokenOfOwnerByIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001700380380620017008339810160408190526200003491620001c1565b81516200004990600190602085019062000068565b5080516200005f90600290602084019062000068565b5050506200027b565b828054620000769062000228565b90600052602060002090601f0160209004810192826200009a5760008555620000e5565b82601f10620000b557805160ff1916838001178555620000e5565b82800160010185558215620000e5579182015b82811115620000e5578251825591602001919060010190620000c8565b50620000f3929150620000f7565b5090565b5b80821115620000f35760008155600101620000f8565b600082601f8301126200011f578081fd5b81516001600160401b03808211156200013c576200013c62000265565b604051601f8301601f19908116603f0116810190828211818310171562000167576200016762000265565b8160405283815260209250868385880101111562000183578485fd5b8491505b83821015620001a6578582018301518183018401529082019062000187565b83821115620001b757848385830101525b9695505050505050565b60008060408385031215620001d4578182fd5b82516001600160401b0380821115620001eb578384fd5b620001f9868387016200010e565b935060208501519150808211156200020f578283fd5b506200021e858286016200010e565b9150509250929050565b600181811c908216806200023d57607f821691505b602082108114156200025f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b611475806200028b6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80634f6ccce711610097578063a22cb46511610066578063a22cb4651461020e578063b88d4fde14610221578063c87b56dd14610234578063e985e9c51461024757600080fd5b80634f6ccce7146101cd5780636352211e146101e057806370a08231146101f357806395d89b411461020657600080fd5b806318160ddd116100d357806318160ddd1461018257806323b872dd146101945780632f745c59146101a757806342842e0e146101ba57600080fd5b806301ffc9a71461010557806306fdde031461012d578063081812fc14610142578063095ea7b31461016d575b600080fd5b6101186101133660046111bd565b610283565b60405190151581526020015b60405180910390f35b6101356102f0565b60405161012491906112a5565b6101556101503660046111f5565b610382565b6040516001600160a01b039091168152602001610124565b61018061017b366004611194565b610412565b005b6000545b604051908152602001610124565b6101806101a236600461104a565b61052a565b6101866101b5366004611194565b610535565b6101806101c836600461104a565b610692565b6101866101db3660046111f5565b6106ad565b6101556101ee3660046111f5565b61070f565b610186610201366004610ffe565b610721565b6101356107b2565b61018061021c36600461115a565b6107c1565b61018061022f366004611085565b610886565b6101356102423660046111f5565b6108bf565b610118610255366004611018565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b60006001600160e01b031982166380ac58cd60e01b14806102b457506001600160e01b03198216635b5e139f60e01b145b806102cf57506001600160e01b0319821663780e9d6360e01b145b806102ea57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600180546102ff9061137a565b80601f016020809104026020016040519081016040528092919081815260200182805461032b9061137a565b80156103785780601f1061034d57610100808354040283529160200191610378565b820191906000526020600020905b81548152906001019060200180831161035b57829003601f168201915b5050505050905090565b600061038f826000541190565b6103f65760405162461bcd60e51b815260206004820152602d60248201527f455243373231413a20617070726f76656420717565727920666f72206e6f6e6560448201526c3c34b9ba32b73a103a37b5b2b760991b60648201526084015b60405180910390fd5b506000908152600560205260409020546001600160a01b031690565b600061041d8261070f565b9050806001600160a01b0316836001600160a01b0316141561048c5760405162461bcd60e51b815260206004820152602260248201527f455243373231413a20617070726f76616c20746f2063757272656e74206f776e60448201526132b960f11b60648201526084016103ed565b336001600160a01b03821614806104a857506104a88133610255565b61051a5760405162461bcd60e51b815260206004820152603960248201527f455243373231413a20617070726f76652063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656420666f7220616c6c0000000000000060648201526084016103ed565b61052583838361099a565b505050565b6105258383836109f6565b600061054083610721565b82106105995760405162461bcd60e51b815260206004820152602260248201527f455243373231413a206f776e657220696e646578206f7574206f6620626f756e604482015261647360f01b60648201526084016103ed565b600080549080805b83811015610632576000818152600360209081526040918290208251808401909352546001600160a01b038116808452600160a01b90910467ffffffffffffffff1691830191909152156105f457805192505b876001600160a01b0316836001600160a01b031614156106295786841415610622575093506102ea92505050565b6001909301925b506001016105a1565b5060405162461bcd60e51b815260206004820152602e60248201527f455243373231413a20756e61626c6520746f2067657420746f6b656e206f662060448201526d0deeedccae440c4f240d2dcc8caf60931b60648201526084016103ed565b61052583838360405180602001604052806000815250610886565b60008054821061070b5760405162461bcd60e51b815260206004820152602360248201527f455243373231413a20676c6f62616c20696e646578206f7574206f6620626f756044820152626e647360e81b60648201526084016103ed565b5090565b600061071a82610ce3565b5192915050565b60006001600160a01b03821661078d5760405162461bcd60e51b815260206004820152602b60248201527f455243373231413a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084016103ed565b506001600160a01b03166000908152600460205260409020546001600160801b031690565b6060600280546102ff9061137a565b6001600160a01b03821633141561081a5760405162461bcd60e51b815260206004820152601a60248201527f455243373231413a20617070726f766520746f2063616c6c657200000000000060448201526064016103ed565b3360008181526006602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6108918484846109f6565b61089d84848484610dba565b6108b95760405162461bcd60e51b81526004016103ed906112b8565b50505050565b60606108cc826000541190565b6109305760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016103ed565b600061094760408051602081019091526000815290565b90508051600014156109685760405180602001604052806000815250610993565b8061097284610ec8565b604051602001610983929190611239565b6040516020818303038152906040525b9392505050565b60008281526005602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6000610a0182610ce3565b80519091506000906001600160a01b0316336001600160a01b03161480610a38575033610a2d84610382565b6001600160a01b0316145b80610a4a57508151610a4a9033610255565b905080610ab45760405162461bcd60e51b815260206004820152603260248201527f455243373231413a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b60648201526084016103ed565b846001600160a01b031682600001516001600160a01b031614610b285760405162461bcd60e51b815260206004820152602660248201527f455243373231413a207472616e736665722066726f6d20696e636f72726563746044820152651037bbb732b960d11b60648201526084016103ed565b6001600160a01b038416610b8c5760405162461bcd60e51b815260206004820152602560248201527f455243373231413a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b60648201526084016103ed565b610b9c600084846000015161099a565b6001600160a01b03858116600090815260046020908152604080832080546fffffffffffffffffffffffffffffffff198082166001600160801b03928316600019018316179092558986168086528386208054938416938316600190810190931693909317909255888552600390935281842080546001600160e01b031916909117600160a01b4267ffffffffffffffff1602179055908601808352912054909116610c9a57610c4d816000541190565b15610c9a578251600082815260036020908152604090912080549186015167ffffffffffffffff16600160a01b026001600160e01b03199092166001600160a01b03909316929092171790555b5082846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050505050565b6040805180820190915260008082526020820152610d02826000541190565b610d615760405162461bcd60e51b815260206004820152602a60248201527f455243373231413a206f776e657220717565727920666f72206e6f6e657869736044820152693a32b73a103a37b5b2b760b11b60648201526084016103ed565b815b6000818152600360209081526040918290208251808401909352546001600160a01b038116808452600160a01b90910467ffffffffffffffff169183019190915215610db0579392505050565b5060001901610d63565b60006001600160a01b0384163b15610ebc57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290610dfe903390899088908890600401611268565b602060405180830381600087803b158015610e1857600080fd5b505af1925050508015610e48575060408051601f3d908101601f19168201909252610e45918101906111d9565b60015b610ea2573d808015610e76576040519150601f19603f3d011682016040523d82523d6000602084013e610e7b565b606091505b508051610e9a5760405162461bcd60e51b81526004016103ed906112b8565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610ec0565b5060015b949350505050565b606081610eec5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610f165780610f00816113b5565b9150610f0f9050600a83611323565b9150610ef0565b60008167ffffffffffffffff811115610f3f57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610f69576020820181803683370190505b5090505b8415610ec057610f7e600183611337565b9150610f8b600a866113d0565b610f9690603061130b565b60f81b818381518110610fb957634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350610fdb600a86611323565b9450610f6d565b80356001600160a01b0381168114610ff957600080fd5b919050565b60006020828403121561100f578081fd5b61099382610fe2565b6000806040838503121561102a578081fd5b61103383610fe2565b915061104160208401610fe2565b90509250929050565b60008060006060848603121561105e578081fd5b61106784610fe2565b925061107560208501610fe2565b9150604084013590509250925092565b6000806000806080858703121561109a578081fd5b6110a385610fe2565b93506110b160208601610fe2565b925060408501359150606085013567ffffffffffffffff808211156110d4578283fd5b818701915087601f8301126110e7578283fd5b8135818111156110f9576110f9611410565b604051601f8201601f19908116603f0116810190838211818310171561112157611121611410565b816040528281528a6020848701011115611139578586fd5b82602086016020830137918201602001949094529598949750929550505050565b6000806040838503121561116c578182fd5b61117583610fe2565b915060208301358015158114611189578182fd5b809150509250929050565b600080604083850312156111a6578182fd5b6111af83610fe2565b946020939093013593505050565b6000602082840312156111ce578081fd5b813561099381611426565b6000602082840312156111ea578081fd5b815161099381611426565b600060208284031215611206578081fd5b5035919050565b6000815180845261122581602086016020860161134e565b601f01601f19169290920160200192915050565b6000835161124b81846020880161134e565b83519083019061125f81836020880161134e565b01949350505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061129b9083018461120d565b9695505050505050565b602081526000610993602083018461120d565b60208082526033908201527f455243373231413a207472616e7366657220746f206e6f6e204552433732315260408201527232b1b2b4bb32b91034b6b83632b6b2b73a32b960691b606082015260800190565b6000821982111561131e5761131e6113e4565b500190565b600082611332576113326113fa565b500490565b600082821015611349576113496113e4565b500390565b60005b83811015611369578181015183820152602001611351565b838111156108b95750506000910152565b600181811c9082168061138e57607f821691505b602082108114156113af57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156113c9576113c96113e4565b5060010190565b6000826113df576113df6113fa565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b03198116811461143c57600080fd5b5056fea26469706673582212204b7a4120f7e83abb82a623c228d0995ac8844aab894cf1a5344774982bc9627864736f6c63430008040033";

type ERC721AConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC721AConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC721A__factory extends ContractFactory {
  constructor(...args: ERC721AConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ERC721A";
  }

  deploy(
    name_: string,
    symbol_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC721A> {
    return super.deploy(name_, symbol_, overrides || {}) as Promise<ERC721A>;
  }
  getDeployTransaction(
    name_: string,
    symbol_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(name_, symbol_, overrides || {});
  }
  attach(address: string): ERC721A {
    return super.attach(address) as ERC721A;
  }
  connect(signer: Signer): ERC721A__factory {
    return super.connect(signer) as ERC721A__factory;
  }
  static readonly contractName: "ERC721A";
  public readonly contractName: "ERC721A";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC721AInterface {
    return new utils.Interface(_abi) as ERC721AInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC721A {
    return new Contract(address, _abi, signerOrProvider) as ERC721A;
  }
}
